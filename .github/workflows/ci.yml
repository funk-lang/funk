name: Haskell CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Haskell
      uses: haskell/actions/setup@v2
      with:
        ghc-version: '9.2.8' # Set your desired GHC version
        cabal-version: 'latest'

    - name: Cache cabal store
      uses: actions/cache@v4
      with:
        path: |
          ~/.cabal/store
        key: ${{ runner.os }}-cabal-${{ hashFiles('**/*.cabal') }}
        restore-keys: |
          ${{ runner.os }}-cabal-

    - name: Build
      run: cabal build all

    - name: Test
      run: cabal test all

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Haskell
      uses: haskell/actions/setup@v2
      with:
        ghc-version: '9.6.2' # Updated to match your build artifacts
        cabal-version: 'latest'

    - name: Cache cabal store
      uses: actions/cache@v4
      with:
        path: |
          ~/.cabal/store
        key: ${{ runner.os }}-cabal-${{ hashFiles('**/*.cabal') }}
        restore-keys: |
          ${{ runner.os }}-cabal-

    - name: Build release binaries
      run: cabal build all
      env:
        CABAL_BUILDDIR: dist-newstyle/build

    - name: Generate tag name
      id: tag
      run: |
        TAG_NAME="nightly-$(date +%s)"
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "release_name=Nightly Release Linux $TAG_NAME" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag_name }}
        name: ${{ steps.tag.outputs.release_name }}
        prerelease: true
        files: |
          dist-newstyle/build/x86_64-linux/ghc-9.6.2/funkc-0.1.0/x/funkc/build/funkc/funkc
          dist-newstyle/build/x86_64-linux/ghc-9.6.2/funkvm-0.1.0/x/funkvm/build/funkvm/funkvm
        token: ${{ secrets.GITHUB_TOKEN }}
        fail_on_unmatched_files: false
        generate_release_notes: true