trait Functor (f :: * -> *) {
  fmap: forall a b . (a -> b) -> f a -> f b
}

trait Monad (m :: * -> *) {
  bind: forall a b . m a -> (a -> m b) -> m b
}

trait Contravariant (f :: * -> *) {
  contramap: forall a b . (b -> a) -> f a -> f b
}

let identity = \x -> x;

identity