let assertEqual = \expected actual name -> {
  let passed = #stringEq expected actual;
  let message = #ifThenElse passed (\_ -> "PASS") (\_ -> "FAIL");
  #bindIO (print name) (\_ ->
    #bindIO (print message) (\_ ->
      #ifThenElse passed 
        (\_ -> #pureIO #Unit)
        (\_ -> #exit 1)
    )
  )
};

let assertEqualInt = \expected actual name -> {
  let passed = #intEq expected actual;
  let message = #ifThenElse passed (\_ -> "PASS") (\_ -> "FAIL");
  #bindIO (print name) (\_ ->
    #bindIO (print message) (\_ ->
      #ifThenElse passed 
        (\_ -> #pureIO #Unit)
        (\_ -> #exit 1)
    )
  )
};

let assertTrue = \condition name -> {
  let message = #ifThenElse condition (\_ -> "PASS") (\_ -> "FAIL");
  #bindIO (print name) (\_ ->
    #bindIO (print message) (\_ ->
      #ifThenElse condition 
        (\_ -> #pureIO #Unit)
        (\_ -> #exit 1)
    )
  )
};

let assertFalse = \condition name -> {
  let message = #ifThenElse condition (\_ -> "FAIL") (\_ -> "PASS");
  #bindIO (print name) (\_ ->
    #bindIO (print message) (\_ ->
      #ifThenElse condition 
        (\_ -> #exit 1)
        (\_ -> #pureIO #Unit)
    )
  )
};
