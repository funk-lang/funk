data State s a = {
  runState: s -> a
}

trait Functor (f :: * -> *) {
  fmap: forall a b . (a -> b) -> f a -> f b
}

trait Monad (m :: * -> *) {
  bind: forall a b . m a -> (a -> m b) -> m b,
  pure: forall a . a -> m a
}

trait MonadState (s :: *) (m :: * -> *) {
  get: m s,
  put: s -> m s
}

instance Functor forall s . State s = {
  fmap = \f state -> state
}

instance Monad forall s . State s = {
  bind = \state f -> state,
  pure = \a -> State {
    runState = \s -> a
  }
}

instance MonadState forall s . s (State s) = {
  get = State {
    runState = \s -> s
  },
  put = \newState -> State {
    runState = \s -> newState
  }
}

let const: forall a b . a -> b -> a = \a _ -> a;

let void: forall f . Functor f => f a -> f #Unit = fmap (const #Unit);

let result: State #Unit #Unit = void (pure #Unit);
result
